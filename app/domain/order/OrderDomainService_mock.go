// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package order

import (
	"context"
	cartDomain "github.com/o-ga09/tutorial-go-fr/app/domain/cart"
	"sync"
	"time"
)

// Ensure, that OrderDomainServiceMock does implement OrderDomainService.
// If this is not the case, regenerate this file with moq.
var _ OrderDomainService = &OrderDomainServiceMock{}

// OrderDomainServiceMock is a mock implementation of OrderDomainService.
//
//	func TestSomethingThatUsesOrderDomainService(t *testing.T) {
//
//		// make and configure a mocked OrderDomainService
//		mockedOrderDomainService := &OrderDomainServiceMock{
//			OrderProductsFunc: func(ctx context.Context, cart *cartDomain.Cart, now time.Time) (string, error) {
//				panic("mock out the OrderProducts method")
//			},
//		}
//
//		// use mockedOrderDomainService in code that requires OrderDomainService
//		// and then make assertions.
//
//	}
type OrderDomainServiceMock struct {
	// OrderProductsFunc mocks the OrderProducts method.
	OrderProductsFunc func(ctx context.Context, cart *cartDomain.Cart, now time.Time) (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// OrderProducts holds details about calls to the OrderProducts method.
		OrderProducts []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Cart is the cart argument value.
			Cart *cartDomain.Cart
			// Now is the now argument value.
			Now time.Time
		}
	}
	lockOrderProducts sync.RWMutex
}

// OrderProducts calls OrderProductsFunc.
func (mock *OrderDomainServiceMock) OrderProducts(ctx context.Context, cart *cartDomain.Cart, now time.Time) (string, error) {
	if mock.OrderProductsFunc == nil {
		panic("OrderDomainServiceMock.OrderProductsFunc: method is nil but OrderDomainService.OrderProducts was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Cart *cartDomain.Cart
		Now  time.Time
	}{
		Ctx:  ctx,
		Cart: cart,
		Now:  now,
	}
	mock.lockOrderProducts.Lock()
	mock.calls.OrderProducts = append(mock.calls.OrderProducts, callInfo)
	mock.lockOrderProducts.Unlock()
	return mock.OrderProductsFunc(ctx, cart, now)
}

// OrderProductsCalls gets all the calls that were made to OrderProducts.
// Check the length with:
//
//	len(mockedOrderDomainService.OrderProductsCalls())
func (mock *OrderDomainServiceMock) OrderProductsCalls() []struct {
	Ctx  context.Context
	Cart *cartDomain.Cart
	Now  time.Time
} {
	var calls []struct {
		Ctx  context.Context
		Cart *cartDomain.Cart
		Now  time.Time
	}
	mock.lockOrderProducts.RLock()
	calls = mock.calls.OrderProducts
	mock.lockOrderProducts.RUnlock()
	return calls
}
