// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package cart

import (
	"context"
	"sync"
)

// Ensure, that CartRepositoryMock does implement CartRepository.
// If this is not the case, regenerate this file with moq.
var _ CartRepository = &CartRepositoryMock{}

// CartRepositoryMock is a mock implementation of CartRepository.
//
//	func TestSomethingThatUsesCartRepository(t *testing.T) {
//
//		// make and configure a mocked CartRepository
//		mockedCartRepository := &CartRepositoryMock{
//			FindByIDFunc: func(ctx context.Context, userID string) (*Cart, error) {
//				panic("mock out the FindByID method")
//			},
//			SaveFunc: func(ctx context.Context, cart *Cart) error {
//				panic("mock out the Save method")
//			},
//		}
//
//		// use mockedCartRepository in code that requires CartRepository
//		// and then make assertions.
//
//	}
type CartRepositoryMock struct {
	// FindByIDFunc mocks the FindByID method.
	FindByIDFunc func(ctx context.Context, userID string) (*Cart, error)

	// SaveFunc mocks the Save method.
	SaveFunc func(ctx context.Context, cart *Cart) error

	// calls tracks calls to the methods.
	calls struct {
		// FindByID holds details about calls to the FindByID method.
		FindByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserID is the userID argument value.
			UserID string
		}
		// Save holds details about calls to the Save method.
		Save []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Cart is the cart argument value.
			Cart *Cart
		}
	}
	lockFindByID sync.RWMutex
	lockSave     sync.RWMutex
}

// FindByID calls FindByIDFunc.
func (mock *CartRepositoryMock) FindByID(ctx context.Context, userID string) (*Cart, error) {
	if mock.FindByIDFunc == nil {
		panic("CartRepositoryMock.FindByIDFunc: method is nil but CartRepository.FindByID was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		UserID string
	}{
		Ctx:    ctx,
		UserID: userID,
	}
	mock.lockFindByID.Lock()
	mock.calls.FindByID = append(mock.calls.FindByID, callInfo)
	mock.lockFindByID.Unlock()
	return mock.FindByIDFunc(ctx, userID)
}

// FindByIDCalls gets all the calls that were made to FindByID.
// Check the length with:
//
//	len(mockedCartRepository.FindByIDCalls())
func (mock *CartRepositoryMock) FindByIDCalls() []struct {
	Ctx    context.Context
	UserID string
} {
	var calls []struct {
		Ctx    context.Context
		UserID string
	}
	mock.lockFindByID.RLock()
	calls = mock.calls.FindByID
	mock.lockFindByID.RUnlock()
	return calls
}

// Save calls SaveFunc.
func (mock *CartRepositoryMock) Save(ctx context.Context, cart *Cart) error {
	if mock.SaveFunc == nil {
		panic("CartRepositoryMock.SaveFunc: method is nil but CartRepository.Save was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Cart *Cart
	}{
		Ctx:  ctx,
		Cart: cart,
	}
	mock.lockSave.Lock()
	mock.calls.Save = append(mock.calls.Save, callInfo)
	mock.lockSave.Unlock()
	return mock.SaveFunc(ctx, cart)
}

// SaveCalls gets all the calls that were made to Save.
// Check the length with:
//
//	len(mockedCartRepository.SaveCalls())
func (mock *CartRepositoryMock) SaveCalls() []struct {
	Ctx  context.Context
	Cart *Cart
} {
	var calls []struct {
		Ctx  context.Context
		Cart *Cart
	}
	mock.lockSave.RLock()
	calls = mock.calls.Save
	mock.lockSave.RUnlock()
	return calls
}
